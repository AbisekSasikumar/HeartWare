The Smart Health Monitoring System is a real-time, multi-sensor platform developed using the ESP32 microcontroller for continuous monitoring of vital physiological and environmental parameters. The system integrates several biomedical sensors including the MAX30102 for heart rate and SpO₂, AD8232 for ECG signal acquisition, and LM35 for body temperature monitoring. In addition to physiological sensing, the system includes the BMP280 sensor to measure barometric pressure and altitude, the ADXL345 accelerometer for fall detection, and the MQ135 gas sensor to monitor air quality levels in the surrounding environment.

Data from all sensors is acquired via the ESP32, processed, and then transmitted to the ThingSpeak cloud platform, where it's visualized and stored using all 8 available fields. At the same time, the ESP32 also transmits sensor readings to a connected PC via serial, allowing Python scripts to capture and store data locally in structured CSV files. Each sensor has a dedicated logging script, ensuring modularity and clear separation of data. This data is saved automatically in the user's OneDrive Desktop folder for convenience.

The system includes a real-time alert mechanism using the Telegram Bot API. When critical thresholds are crossed—such as SpO₂ dropping below 90%, heart rate exceeding 120 bpm, or a sudden acceleration spike indicating a potential fall—immediate alerts are sent via Telegram to a designated user.

To ensure the system meets Technology Readiness Level 8 (TRL 8) standards, extensive testing was conducted across multiple scenarios. Each sensor was tested individually with both Arduino Serial Monitor and Python loggers to verify accuracy and consistency. Long-term data logging tests were simulated over a 24-hour period to validate sensor stability, capture potential drift, and confirm the robustness of the logging system. Drift testing was especially critical for sensors like MAX30102 and MQ135, where environmental factors can introduce measurement inconsistencies.

Additional TRL 8 validation included stress testing the ESP32 under continuous read/log/upload cycles, and performing motion/fall tests for the ADXL345 in real-world settings. Python scripts ensured automatic file creation and safe data appending even after multiple runs. The project also implemented data filtering, noise handling, and ensured synchronization between cloud data and local logs for cross-verification.

The Smart Health Monitoring System has proven reliable in a variety of simulated real-world conditions. Its ability to collect, log, transmit, and visualize multi-modal sensor data in real-time makes it a strong candidate for applications in remote patient monitoring, elderly care, telehealth, and academic or hackathon research. With all components and logging systems tested and operational, the system qualifies as a TRL 8 prototype, ready for deployment in operational environments.